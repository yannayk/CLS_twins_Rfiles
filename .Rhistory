summarize(win_strat = strategy[which.max(QALYs)], .groups = "drop") %>%
ungroup() %>%
# Create a standardized value to allow aggregate plotting
group_by(var_name) %>%
arrange(var_value) %>%
# As many rows as the values_length. in the function
# Subtracting 1 to get 0.00 for the first value
mutate(value_num = row_number() - 1) %>%
# Proportions, for easier interpretation
mutate(strd_value = value_num/max(value_num)) %>%
ungroup() %>%
left_join(df_params) %>%
# Standardize the base value based on the existing standardization
group_by(var_name) %>%
mutate(base_strd = predict(lm(strd_value ~ var_value),
newdata = data.frame(var_value = unique(base_value))))
# ptb28
owsa_ptb28 <- owsa_df %>%
# Find the "winning" strategy for a given variable value
group_by(var_name, var_value) %>%
summarize(win_strat = strategy[which.min(ptb28)], .groups = "drop") %>%
ungroup() %>%
# Create a standardized value to allow aggregate plotting
group_by(var_name) %>%
arrange(var_value) %>%
# As many rows as the values_length. in the function
# Subtracting 1 to get 0.00 for the first value
mutate(value_num = row_number() - 1) %>%
# Proportions, for easier interpretation
mutate(strd_value = value_num/max(value_num)) %>%
ungroup() %>%
left_join(df_params) %>%
# Standardize the base value based on the existing standardization
group_by(var_name) %>%
mutate(base_strd = predict(lm(strd_value ~ var_value),
newdata = data.frame(var_value = unique(base_value))))
# ptb34
owsa_ptb34 <- owsa_df %>%
# Find the "winning" strategy for a given variable value
group_by(var_name, var_value) %>%
summarize(win_strat = strategy[which.min(ptb34)], .groups = "drop") %>%
ungroup() %>%
# Create a standardized value to allow aggregate plotting
group_by(var_name) %>%
arrange(var_value) %>%
# As many rows as the values_length. in the function
# Subtracting 1 to get 0.00 for the first value
mutate(value_num = row_number() - 1) %>%
# Proportions, for easier interpretation
mutate(strd_value = value_num/max(value_num)) %>%
ungroup() %>%
left_join(df_params) %>%
# Standardize the base value based on the existing standardization
group_by(var_name) %>%
mutate(base_strd = predict(lm(strd_value ~ var_value),
newdata = data.frame(var_value = unique(base_value))))
library(ggplot2)
# Strategy_names and colours
strat_names <- c(s1 = "No screen", s2 = "One-step screen", s3 = "Two-step screen")
v_strat_colors <- c(s1 = "#F8766D", s2 = "#00BA38", s3 = "#619CFF")
## FACET WRAP (single outcome)
owsa_facet_costs <- owsa_df %>%
ggplot(aes(x = var_value, y = costs, color = strategy)) +
geom_line() +
scale_color_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
geom_vline(data = df_params, aes(xintercept = base_value), alpha = 0.7, linetype = "dotted") +
facet_wrap(~var_name, scales = "free") +
labs(title = "OWSA: Costs",
subtitle = "Dotted vertical lines = base case") +
theme_bw()
owsa_facet_costs
owsa_facet_QALYs <- owsa_df %>%
ggplot(aes(x = var_value, y = QALYs, color = strategy)) +
geom_line() +
scale_color_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
geom_vline(data = df_params, aes(xintercept = base_value), alpha = 0.7, linetype = "dotted") +
facet_wrap(~var_name, scales = "free") +
labs(title = "OWSA: QALYs",
subtitle = "Dotted vertical lines = base case") +
theme_bw()
owsa_facet_QALYs <- owsa_df %>%
ggplot(aes(x = var_value, y = QALYs, color = strategy)) +
geom_line() +
scale_color_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
geom_vline(data = df_params, aes(xintercept = base_value), alpha = 0.7, linetype = "dotted") +
facet_wrap(~var_name, scales = "free") +
labs(title = "OWSA: QALYs",
subtitle = "Dotted vertical lines = base case") +
theme_bw()
owsa_facet_QALYs
# Costs
owsa_costs_plot <- ggplot(data = owsa_costs, aes(x = strd_value, y = var_def, fill = win_strat)) +
geom_tile(color = "black") +
geom_point(aes(x = base_strd, y = var_def), shape = 3, color = "white") +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
labs(title = "(A) Costs",
subtitle = "+ = base case value",
y = "Model parameter",
x = "Standardized parameter value") +
theme_bw()
owsa_costs_plot
# Pulling cutoff values
owsa_costs %>%
filter(var_name == c_n_37)
# Pulling cutoff values
owsa_costs %>%
filter(var_name == c_n_37)
# Pulling cutoff values
(owsa_costs %>%
filter(var_name == c_n_37))
ggsave(plot = owsa_costs_plot, filename = "owsa_costs.pdf", path = "Results/", width = 10, height = 13)
# QALYs
owsa_QALYs_plot <- ggplot(data = owsa_QALYs, aes(x = strd_value, y = var_def, fill = win_strat)) +
geom_tile(color = "black") +
geom_point(aes(x = base_strd, y = var_def), shape = 3, color = "white") +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
labs(title = "(B) QALYs",
subtitle = "+ = base case value",
y = "Model parameter",
x = "Standardized parameter value") +
theme_bw()
owsa_QALYs_plot
ggsave(plot = owsa_QALYs_plot, filename = "owsa_QALYs.pdf", path = "Results/", width = 10, height = 13)
# ptb28
owsa_ptb28_plot <- ggplot(data = owsa_ptb28, aes(x = strd_value, y = var_def, fill = win_strat)) +
geom_tile(color = "black") +
geom_point(aes(x = base_strd, y = var_def), shape = 3, color = "white") +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
labs(title = "(C) Pre-term birth <= 28+0 weeks",
subtitle = "+ = base case value",
y = "Model parameter",
x = "Standardized parameter value") +
theme_bw()
owsa_ptb28_plot
ggsave(plot = owsa_ptb28_plot, filename = "owsa_ptb28.pdf", path = "Results/", width = 10, height = 13)
# ptb34
owsa_ptb34_plot <- ggplot(data = owsa_ptb34, aes(x = strd_value, y = var_def, fill = win_strat)) +
geom_tile(color = "black") +
geom_point(aes(x = base_strd, y = var_def), shape = 3, color = "white") +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_manual(values = v_strat_colors, name = "Dominant strategy", labels = strat_names) +
labs(title = "(C) Pre-term birth <= 34+0 weeks",
subtitle = "+ = base case value",
y = "Model parameter",
x = "Standardized parameter value") +
theme_bw()
owsa_ptb34_plot
ggsave(plot = owsa_ptb34_plot, filename = "owsa_ptb34.pdf", path = "Results/", width = 10, height = 13)
library(dplyr)
library(ggplot2)
library(rlang)
library(ggpubr)
# Strategy_names and colours
strat_names <- c(s1 = "No screen", s2 = "One-step screen", s3 = "Two-step screen")
v_strat_colors <- c(s1 = "#F8766D", s2 = "#00BA38", s3 = "#619CFF")
twsa_fun <- function(var_nameA.,
base_caseA.,
minA.,
maxA.,
var_nameB.,
base_caseB.,
minB.,
maxB.,
values_length. = 50,
v_strat_colors. = v_strat_colors,
strat_names. = strat_names) {
# Add a "." to the variable name to serve as an argument for the CLS_model
arg_nameA <- paste0(var_nameA., ".")
arg_nameB <- paste0(var_nameB., ".")
# Create ranges for the two variables
range_A <- seq(from = minA., to = maxA., length.out = values_length.)
range_B <- seq(from = minB., to = maxB., length.out = values_length.)
# Combine the ranges into a dataframe of all combinations of values
df_ranges <- expand.grid(range_A = range_A, range_B = range_B)
# Rename columns based on the provided variable names (dynamically)
df_ranges <- df_ranges %>%
rename(!!sym(var_nameA.) := range_A,
!!sym(var_nameB.) := range_B)
# Create list providing names and values from df_ranges
args_list <- lapply(1:nrow(df_ranges), function(i) setNames(as.list(df_ranges[i,]), names(df_ranges)))
# Run the CLS_model for each list item in args_list
# Extract only list value 4 (the df_all)
model_out <- lapply(args_list, function(arg) {
do.call(CLS_model, arg)[[4]]
})
# For each data frame in the list model_out, add parameter values for reference
# Column names are defined dynamically
for(i in seq_along(model_out)) {
model_out[[i]] <- model_out[[i]] %>%
mutate(!!var_nameA. := as.numeric(rep(args_list[[i]][[1]], nrow(model_out[[i]]))),
!!var_nameB. := as.numeric(rep(args_list[[i]][[2]], nrow(model_out[[i]]))))
}
# Combine the data frames from model_out into a single long df
twsa_df <- bind_rows(model_out)
# Determine the "winning" strategy for the main outcomes: costs, QALYs, ptb28, ptb34
twsa_costs <- twsa_df %>%
# Find the "winning" strategy for a given variable value
group_by(across(all_of(c(var_nameA., var_nameB.)))) %>%
summarize(win_strat = strategy[which.min(costs)], .groups = "drop") %>%
ungroup()
twsa_QALYs <- twsa_df %>%
# Find the "winning" strategy for a given variable value
group_by(across(all_of(c(var_nameA., var_nameB.)))) %>%
summarize(win_strat = strategy[which.max(QALYs)], .groups = "drop") %>%
ungroup()
# Create plots: costs, QALYs, ptb28, ptb34
plot_costs <- twsa_costs %>%
ggplot(aes(x = .data[[var_nameA.]], y = .data[[var_nameB.]])) +
geom_tile(aes(fill = win_strat), , color = "black") +
geom_point(aes(x = base_caseA., y = base_caseB.), shape = 3, color = "white") +
scale_fill_manual(values = v_strat_colors., name = "Dominant strategy", labels = strat_names.) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
theme(aspect.ratio = 1)
plot_QALYs <- twsa_QALYs %>%
ggplot(aes(x = .data[[var_nameA.]], y = .data[[var_nameB.]])) +
geom_tile(aes(fill = win_strat), color = "black") +
geom_point(aes(x = base_caseA., y = base_caseB.), shape = 3, color = "white") +
scale_fill_manual(values = v_strat_colors., name = "Dominant strategy", labels = strat_names.) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
theme(aspect.ratio = 1)
# Function output: dataframe of model results and twsa plot
return(list(twsa_df = twsa_df,
twsa_costs = twsa_costs,
twsa_QALYs = twsa_QALYs,
plot_costs = plot_costs,
plot_QALYs = plot_QALYs
)
)
}
twsa_prog28 <- twsa_fun(var_nameA. = "rr_p_28", base_caseA. = rr_p_28, minA. = 0.24, maxA. = 1.15,
var_nameB. = "c_p",     base_caseB. = c_p,     minB. = 15 , maxB. = 25)$plot_costs
twsa_prog32 <- twsa_fun(var_nameA. = "rr_p_32", base_caseA. = rr_p_32, minA. = 0.34, maxA. = 1.47,
var_nameB. = "c_p",     base_caseB. = c_p,     minB. = 15, maxB. = 25)$plot_costs
twsa_prog34 <- twsa_fun(var_nameA. = "rr_p_34", base_caseA. = rr_p_34, minA. = 0.31, maxA. = 1.33,
var_nameB. = "c_p",     base_caseB. = c_p,     minB. = 15, maxB. = 25)$plot_costs
twsa_prog37 <- twsa_fun(var_nameA. = "rr_p_37", base_caseA. = rr_p_37, minA. = 0.72, maxA. = 1.43,
var_nameB. = "c_p",     base_caseB. = c_p,     minB. = 15, maxB. = 25)$plot_costs
twsa_prog <- ggarrange(twsa_prog28, twsa_prog32, twsa_prog34, twsa_prog37,
nrow = 1, common.legend = TRUE) %>%
annotate_figure(bottom = text_grob("Progesterone effectiveness by GA category"),
left = text_grob("Cost of progesterone ($)", rot = 90))
twsa_prog
twsa_prog
ggsave(plot = twsa_prog, filename = "twsa_prog.pdf", path = "Results/", height = 3.5)
twsa_cerc28 <- twsa_fun(var_nameA. = "rr_c_28", base_caseA. = rr_c_28, minA. = 0.26, maxA. = 1.16,
var_nameB. = "c_c",     base_caseB. = c_c,     minB. = 2400, maxB. = 4374)$plot_costs
twsa_cerc32 <- twsa_fun(var_nameA. = "rr_c_32", base_caseA. = rr_c_32, minA. = 0.38, maxA. = 1.6,
var_nameB. = "c_c",     base_caseB. = c_c,     minB. = 2400, maxB. = 4374)$plot_costs
twsa_cerc34 <- twsa_fun(var_nameA. = "rr_c_34", base_caseA. = rr_c_34, minA. = 0.11, maxA. = 0.84,
var_nameB. = "c_c",     base_caseB. = c_c,     minB. = 2400, maxB. = 4374)$plot_costs
twsa_cerc37 <- twsa_fun(var_nameA. = "rr_c_37", base_caseA. = rr_c_37, minA. = 0.6, maxA. = 1.67,
var_nameB. = "c_c",     base_caseB. = c_c,     minB. = 2400, maxB. = 4374)$plot_costs
twsa_cerc <- ggarrange(twsa_cerc28, twsa_cerc32, twsa_cerc34, twsa_cerc37,
nrow = 1, common.legend = TRUE) %>%
annotate_figure(bottom = text_grob("Cerclage effectiveness by GA category"),
left = text_grob("Cost of cerclage ($)", rot = 90))
twsa_cerc
twsa_cerc
twsa_cercprog28 <- twsa_fun(var_nameA. = "rr_cp_28", base_caseA. = rr_cp_28, minA. = 0.26, maxA. = 1.21,
var_nameB. = "c_c",      base_caseB. = c_c,      minB. = 2400, maxB. = 4374)
View(twsa_cercprog28$twsa_costs)
twsa_cercprog32 <- twsa_fun(var_nameA. = "rr_cp_32", base_caseA. = rr_cp_32, minA. = 0.38, maxA. = 1.6,
var_nameB. = "c_c",      base_caseB. = c_c,      minB. = 2400, maxB. = 4374)$plot_costs
twsa_cercprog34 <- twsa_fun(var_nameA. = "rr_cp_34", base_caseA. = rr_cp_34, minA. = 0.11, maxA. = 0.84,
var_nameB. = "c_c",      base_caseB. = c_c,      minB. = 2400, maxB. = 4374)$plot_costs
twsa_cercprog37 <- twsa_fun(var_nameA. = "rr_cp_37", base_caseA. = rr_cp_37, minA. = 0.6, maxA. = 1.67,
var_nameB. = "c_c",      base_caseB. = c_c,      minB. = 2400, maxB. = 4374)$plot_costs
twsa_cercprog <- ggarrange(twsa_cercprog28$plot_costs, twsa_cercprog32, twsa_cercprog34, twsa_cercprog37,
nrow = 1, common.legend = TRUE) %>%
annotate_figure(bottom = text_grob("Cerclage effectiveness by GA category"),
left = text_grob("Cost of cerclage ($)", rot = 90))
twsa_cercprog
ggsave(plot = twsa_cercprog, filename = "twsa_cercprog.pdf", path = "Results/", height = 3.5)
# Modify df for plotting
df_icer_long <- df_icer %>%
select(QALYs_s2s1, costs_s2s1, QALYs_s3s1, costs_s3s1) %>%
pivot_longer(cols = everything(),
names_to = c(".value", "comparison"),
names_sep = "_")
View(df_icer_long)
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_cost = mean(cost),
p0025 = quantile(cost, 0.025),
p9750 = quantile(cost, 0.975))
library(dplyr)
library(tidyr)
library(ggplot2)
library(dampack)
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_cost = mean(cost),
p0025 = quantile(cost, 0.025),
p9750 = quantile(cost
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_cost = mean(cost),
p0025 = quantile(cost, 0.025),
p9750 = quantile(cost, 0.975))
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_cost = mean(costs),
p0025 = quantile(costs, 0.025),
p9750 = quantile(costs, 0.975))
View(summary_icer)
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_costs = mean(costs),
p0025 = quantile(costs, 0.025),
p9750 = quantile(costs, 0.975),
mean_QALYs = mean(QALYs),
p0025 = quantile(QALYs, 0.025),
p9750 = quantile(QALYs, 0.975))
View(summary_icer)
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_costs = mean(costs),
p0025_costs = quantile(costs, 0.025),
p9750_costs = quantile(costs, 0.975),
mean_QALYs = mean(QALYs),
p0025_QALYs = quantile(QALYs, 0.025),
p9750_QALYs = quantile(QALYs, 0.975))
# Willingness to pay threshold
v_wtp <- seq(from = 0, to = 250000, by = 10000)
ceac_obj <- ceac(wtp = v_wtp, psa = psa_obj)
ceac_plot <- plot(ceac_obj, ylim = c(0, 1.0)) +
scale_color_discrete(labels = strat_names)
ceac_plot
ceac_obj
summary(ceac_obj)
View(ceac_obj)
# Modify df for plotting
df_icer_long <- df_icer %>%
select(QALYs_s2s1, costs_s2s1, QALYs_s3s1, costs_s3s1) %>%
pivot_longer(cols = everything(),
names_to = c(".value", "comparison"),
names_sep = "_") %>%
mutate(icer = costs/QALYs)
View(df_icer_long)
summary_icer <- df_icer_long %>%
group_by(comparison) %>%
summarize(mean_costs = mean(costs),
p0025_costs = quantile(costs, 0.025),
p9750_costs = quantile(costs, 0.975),
mean_QALYs = mean(QALYs),
p0025_QALYs = quantile(QALYs, 0.025),
p9750_QALYs = quantile(QALYs, 0.975),
mean_icer = mean(icer),
p0025_icer = quantile(icer, 0.025),
p9750_icer = quantile(icer, 0.975))
length(df_params$var_def)
# Pulling cutoff values
owsa_costs %>%
filter(var_name == c_n_37)
View(owsa_costs)
View(owsa_ptb28)
View(twsa_cercprog28$twsa_costs)
ceac_plot
ggsave(plot = ceac_plot, filename = "ceac_plot.pdf", path = "Results/", height = 5, width = 10)
ggsave(plot = ceac_plot, filename = "ceac_plot.pdf", path = "Results/", height = 5, width = 7)
ggsave(plot = ceac_plot, filename = "ceac_plot.pdf", path = "Results/", height = 5, width = 8)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
## Baseline HUI3 by age (SOURCE IS CCHS 2015/16 via Odesi)
# For instructions on incorporating weights see "Data/CCHS_2015_2016_User_Guide.pdf (s.10.2.3)"
# Relevant columns maintained: Age category (DHHGAGE), HUI3 outcome (HUIDVHSI), individual record weight (WTS_M)
# Remove missing HUI3 data (i.e. 99.999 and 99.996)
cchs_hui3 <- read.csv("Data/CCHS_2015-2016_modified.csv", header = TRUE) %>%
group_by(DHHGAGE) %>%
rename(age_cat = DHHGAGE, hui3 = HUIDVHSI) %>%
# Generate the weighted HUI3 value for a given individual (numerator)
mutate(hui3_w = hui3 * WTS_M)
## Define age categories from CCHS data
age_cat <- data.frame(age_cat = c(1:16),
age_range = c("12-14", "15-17", "18-19", "20-24", "25-29", "30-34","35-39","40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80+"),
age_n = c(3, 3, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 21))
# Term (baseline) initial value
term_init <- 0.871 # SOURCE --> Saigal 2016
term_init_28 <- term_init
term_init_32 <- term_init
term_init_34 <- term_init
term_init_37 <- term_init
term_init_term <- term_init
## Calculate HUI3 summary data by age group and extend to age 0
hui3_sum <- cchs_hui3 %>%
summarize(n = n(),
mean_hui3_raw = mean(hui3),
se_hui3_raw = sd(hui3)/sqrt(n()),
wgt_sum = sum(WTS_M),
hui3_w_sum = sum(hui3_w)) %>%
mutate(mean_hui3 = hui3_w_sum/wgt_sum) %>%
# Organize data into annual categories
merge(age_cat) %>%
uncount(age_n) %>%
arrange(age_cat) %>%
mutate(age = c(12:100)) %>%
# Add ages 0-11 (not available in the CCHS data), added from Saigal data
add_row(mean_hui3 = rep(term_init, 12), age = 0:11, age_range = "0-11", .before = TRUE)
# Term (baseline) change (age 100-0)
# SOURCE --> CCHS, Saigal 2016
term_change <- -0.211
term_change_28 <- term_change
term_change_32 <- term_change
term_change_34 <- term_change
term_change_37 <- term_change
term_change_term <- term_change
# Effect of neurosensory impairment AND pre-maturity on HUI3 relative to TERM controls
pt_nsi_i_dif <- -0.264
# Proportion of patients with NSI
p_nsi_28 <- 0.45
p_nsi_32 <- 0.28
p_nsi_34 <- 0.05
p_nsi_37 <- 0.07
p_nsi_term <- 0.02
## Difference in initial hui3 from pre-maturity alone (i.e. not NSI)
pt_i_dif_28 <- -0.092 # Known from Saigal 2016
pt_i_dif_32 <- 0 # Unknown, assumed to be zero
pt_i_dif_34 <- 0
pt_i_dif_37 <- 0
hui3_calc <- function(term_init. = term_init,
term_change. = term_change,
pt_i_dif. = 0,                  # set at default to term
pt_nsi_i_dif. = pt_nsi_i_dif,
p_nsi_term. = p_nsi_term,
p_nsi_GA.){
## 1. Calculate the HUI3 curve for pt and pt + NSI
# Variable terms (y scale shift i.e. initial and final values)
# Without NSI (a = final value, b = initial value)
a_pt <- term_init. + term_change. + pt_i_dif.
a_pt <- ifelse(a_pt < 0, 0, a_pt)
b_pt <- term_init. + pt_i_dif.
# With NSI (a = final value, b = initial value)
a_pt_nsi <- term_init. + term_change. + pt_nsi_i_dif.
a_pt_nsi <- ifelse(a_pt_nsi < 0, 0, a_pt_nsi)
b_pt_nsi <- term_init. + pt_nsi_i_dif.
# Constant terms
age <- seq(from = 0, to = 100, by = 1)
c <- 72
d <- 15
# Curves for pt and pt_nsi
pt <- a_pt + (b_pt - a_pt)/(1 + (age/c)^d)
pt_nsi <- a_pt_nsi + (b_pt_nsi - a_pt_nsi)/(1 + (age/c)^d)
## 2. Combine the two curves (pt and pt_nsi) using p_nsi as a weight term
# Difference in p_nsi from term (i.e. baseline neurosensory impairment probability)
p_nsi <- abs(p_nsi_GA. - p_nsi_term.)
# New curve as a weighted average
final_curve <- (pt_nsi * p_nsi) + (pt * (1 - p_nsi))
return(final_curve)
}
# Calculation of age-dependent HUI3 values for each GA category
v_q_28 <- hui3_calc(term_init. = term_init,
term_change. = term_change,
pt_i_dif. = pt_i_dif_28,
pt_nsi_i_dif. = pt_nsi_i_dif,
p_nsi_term. = p_nsi_term,
p_nsi_GA. = p_nsi_28)
v_q_32 <- hui3_calc(term_init. = term_init,
term_change. = term_change,
pt_i_dif. = pt_i_dif_32,
pt_nsi_i_dif. = pt_nsi_i_dif,
p_nsi_term. = p_nsi_term,
p_nsi_GA. = p_nsi_32)
v_q_34 <- hui3_calc(term_init. = term_init,
term_change. = term_change,
pt_i_dif. = pt_i_dif_34,
pt_nsi_i_dif. = pt_nsi_i_dif,
p_nsi_term. = p_nsi_term,
p_nsi_GA. = p_nsi_34)
v_q_37 <- hui3_calc(term_init. = term_init,
term_change. = term_change,
pt_i_dif. = pt_i_dif_37,
pt_nsi_i_dif. = pt_nsi_i_dif,
p_nsi_term. = p_nsi_term,
p_nsi_GA. = p_nsi_37)
v_q_term <- hui3_calc(term_init. = term_init,
term_change. = term_change,
pt_i_dif. = 0,
pt_nsi_i_dif. = 0,
p_nsi_term. = p_nsi_term,
# Set to 0 to avoid cancelling out and making p_nsi_term = 0 in calc.
p_nsi_GA. = 0)
# All HUI3 curves in a single dataframe
hui3_curves <- data.frame(age = hui3_sum$age,
v_q_28,
v_q_32,
v_q_34,
v_q_37,
v_q_term) %>%
pivot_longer(cols = c(2:6), names_to = "category", values_to = "hui3")
# Plot of annual HUI3 scores by GA category
hui3_plot <- ggplot(data = hui3_curves, aes(x = age, y = hui3)) +
geom_line(aes(color = category), alpha = 0.7) +
geom_line(data = hui3_sum, aes(y = mean_hui3, color = "CCHS"), color = "black", linetype = "dashed") +
ylim(c(0, 1)) +
labs(x = "Age",
y = "HUI3") +
scale_color_discrete(name = "GA categories (weeks)",
labels = (v_GA_cat)) +
theme_bw()
hui3_plot
#ggsave(plot = hui3_plot, filename = "hui3_plot.pdf", path = "Results/", width = 10, height = 7)
```
hui3_plot
